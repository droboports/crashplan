# /etc/service.subr
#
# Provides some functions to support the service.sh script used by
# DroboApps.
#
# This should only be called from a DroboApp service.sh!
#
# This script follows Google's style guide for shell scripts. See more
# information here:
# https://google-styleguide.googlecode.com/svn/trunk/shell.xml
#
# Local variables are lower_case. Global variables are UPPER_CASE.
# Functions and variables starting with an underscore are internal API,
# and should not be redefined.

FRAMEWORK_VERSION="2.1"
DROBOAPPS_DIR="/mnt/DroboFS/Shares/DroboApps"
DROBOAPPS_TMPDIR="/tmp/DroboApps"
APACHE_CONF_DIR="${DROBOAPPS_DIR}/apache/conf/includes"
SERVICE_CONF="${DROBOAPPS_DIR}/.servicerc"
DROBOAPPS_REPO_XML="ftp://updates.drobo.com/droboapps/2.0/droboapps_listing_2.5.2.xml"
DROBOAPPS_REPO_URL="ftp://updates.drobo.com/droboapps/2.0/downloads"
# http://files.drobo.com/droboapps/
SERVICE_DEPENDS="/etc/service.depends"
SERVICE_WEBUI="/etc/service.webui"
DEFAULT_DEPENDS=""
STDOUT=">&1"
STDERR=">&2"

_SERIAL_NUMBER="/sys/devices/dri_dnas_primary/dnas_adp_1/driver/serial"
_DEPENDS_STACK=""

# All commands are defined here with absolute path. This script does not depend
# on PATH to find anything.
SH=/bin/sh
CP=/bin/cp
RM=/bin/rm
CAT=/bin/cat
SED=/bin/sed
TAR=/bin/tar
GREP=/bin/grep
MKDIR=/bin/mkdir
TOUCH=/bin/touch
SSD=/sbin/start-stop-daemon
MKTEMP=/bin/mktemp
WC=/usr/bin/wc
AWK=/usr/bin/awk
SEQ=/usr/bin/seq
DIFF=/usr/bin/diff
FIND=/usr/bin/find
WGET=/usr/bin/wget
BASENAME=/usr/bin/basename
DIRNAME=/usr/bin/dirname
REALPATH=/usr/bin/realpath
XMLLINT=/usr/bin/xmllint

# The service.depends file includes dependency information for legacy apps.
#
# The syntax of this file is in the format:
#    <name>_depends="appname otherapp anotherapp"
# where <name> is the app's folder name under ${DROBOAPPS_DIR}.
#
# When a DroboApp attempts to start, if service.sh does not specify depends
# then if a <name>_depends is set, that value is used.

if [ -f "${SERVICE_DEPENDS}" ]; then
  . "${SERVICE_DEPENDS}"
fi

# The service.webui file includes webui information for legacy apps.
#
# The syntax of this file is in the format:
#    <name>_webui="<URL suffix>"
# where <name> is the app's folder name under ${DROBOAPPS_DIR}.
#
# When a DroboApp attempts to start, if service.sh does not specify webui
# then if a <name>_webui is set, that value is used.

if [ -f "${SERVICE_WEBUI}" ]; then
  . "${SERVICE_WEBUI}"
fi


# _list_remote_droboapps
# $1: XML_URL (optional)
# return: 0 if file downloaded correctly, wget error code otherwise.
# This function parses the repository's XML file to extract the latest version
# of an app.
_list_remote_droboapps() {
  local _repoXml="${2:-$DROBOAPPS_REPO_XML}"
  local _xml=""
  local _count

  _xml="$($WGET --quiet -O- "${_repoXml}" 2> /dev/null)"
  _count="$(set +x; echo "${_xml}" | $XMLLINT --xpath "count(//App/Name)" -)"
  if [ ${_count} -ge 1 ]; then
    for i in $($SEQ 1 ${_count}); do
      echo -n "$(set +x; echo "${_xml}" | $XMLLINT --xpath "//App[$i]/Name/text()" -) "
    done
  fi
}


# _get_remote_version
# $1: APP_NAME
# $2: XML_URL (optional)
# return: 0 if file downloaded correctly, wget error code otherwise.
# This function parses the repository's XML file to extract the latest version
# of an app.
_get_remote_version() {
  local _repoXml="${2:-$DROBOAPPS_REPO_XML}"
  local _xpath="//App[Name/text()=\"${1}\"]/Version/text()"
  local _version=""

  _version="$($WGET --quiet -O- "${_repoXml}" 2> /dev/null | $XMLLINT --xpath "${_xpath}" -)"
  echo "${_version}"
}


# _list_droboapps
# return: a space-separated list of names of all installed DroboApps.
_list_droboapps() {
  $FIND "${DROBOAPPS_DIR}" \( ! -regex '.*/\..*' \) -mindepth 1 -maxdepth 1 -type d -exec $BASENAME {} \; || true
}


# _is_enabled
# $1: APP_NAME
# return: 0 if service is enabled, 1 if not
# This function assumes ${SERVICE_CONF} has already been sourced.
_is_enabled() {
  local _value=""

  if [ ! -f "${SERVICE_CONF}" ]; then
    touch "${SERVICE_CONF}"
  fi
  # get value of <name>_enable where name is the service name
  _value="$($AWK -F = -v name="${1}_enable" '$1 == name { gsub(/"/, "", $2); print $2 }' "${SERVICE_CONF}")"
  if [ -z "${_value}" ]; then
    # not set, so we're going to default to adding the enable line.
    echo "${1}_enable=\"YES\"" >> "${SERVICE_CONF}"
    return 0
  fi
  # see if the service's enable is set to YES/NO
  case ${_value} in
    [Yy][Ee][Ss]) return 0 ;;
    [Nn][Oo])     return 1 ;;
    *)            return 1 ;;
  esac
}


# _set_enabled
# $1: APP_NAME
# $2: "YES" or "NO"
# This function marks the app as enabled or disabled. If the app is not
# found in ${SERVICE_CONF}, then default ${2} to "YES".
_set_enabled() {
  local _value=""

  if [ ! -f "${SERVICE_CONF}" ]; then
    touch "${SERVICE_CONF}"
  fi
  # get value of name_enable where name is the service name
  _value="$($AWK -F = -v name="${1}_enable" '$1 == name { gsub(/"/, "", $2); print $2 }' "${SERVICE_CONF}")"
  if [ -z "${_value}" ]; then
    # not set, so we're going to default to adding the given value.
    echo "${1}_enable=\"${2}\"" >> "${SERVICE_CONF}"
    return 0
  fi
  $SED -i "s/${1}_enable=.*/${1}_enable=\"${2}\"/g" "${SERVICE_CONF}"
}


# set_enabled
# $1: APP_NAME
# $2: "YES" or "NO"
# Forwards everything to _set_enabled. Preserved for backwards compatibility.
set_enabled() {
  _set_enabled "$@"
}


# _unset_enabled
# $1: APP_NAME
# This function removes the app from ${SERVICE_CONF}.
_unset_enabled() {
  local _appName="${1}"

  if [ ! -f "${SERVICE_CONF}" ]; then
    touch "${SERVICE_CONF}"
  fi
  $SED -e "/${_appName}_enable=.*/d" -i "${SERVICE_CONF}"
  return 0
}


# _grep_variable
# $1: VAR_REGEX
# $2: FILE_PATH
# $3: 0 = trim to first word (default), 1 = do not trim
# return: the value of the variable, as is.
_grep_variable() {
  if [ "${3:-0}" = "0" ]; then
    $GREP "${1}" "${2}" | $SED -e "s/${1}//" -e 's/\"//g' | $AWK '{print $1}'
  else
    $GREP "${1}" "${2}" | $SED -e "s/${1}//" -e 's/\"//g'
  fi
}


# _get_framework_version
# $1: APP_NAME
# return: the framework_version variable of the app
_get_framework_version() {
  if [ -f "${DROBOAPPS_DIR}/${1}/service.sh" ]; then
    _grep_variable '^framework_version=' "${DROBOAPPS_DIR}/${1}/service.sh"
  fi
}


# _get_name
# $1: APP_NAME
# return: the name of the app
# This functions tries to extract the app name from service.sh, and falls back
# to the folder name for apps that do not have a service.sh.
_get_name() {
  if [ -f "${DROBOAPPS_DIR}/${1}/service.sh" ]; then
    _grep_variable '^[Nn]ame=' "${DROBOAPPS_DIR}/${1}/service.sh"
  fi
}


# _get_version
# $1: APP_NAME
# return: the version variable of the app
_get_version() {
  if [ -f "${DROBOAPPS_DIR}/${1}/service.sh" ]; then
    _grep_variable '^[Vv]ersion=' "${DROBOAPPS_DIR}/${1}/service.sh"
  fi
}


# _get_description
# $1: APP_NAME
# return: the description variable of the app
_get_description() {
  if [ -f "${DROBOAPPS_DIR}/${1}/service.sh" ]; then
    _grep_variable '^[Dd]escription=' "${DROBOAPPS_DIR}/${1}/service.sh" 1
  fi
}


# _get_webui
# $1: APP_NAME
# return: the webui variable of the app
_get_webui() {
  local _webui=""

  if [ -f "${DROBOAPPS_DIR}/${1}/service.sh" ]; then
    _webui="$(_grep_variable '^webui=' "${DROBOAPPS_DIR}/${1}/service.sh" 1)"
  fi
  # Legacy information from /etc/service.webui
  if [ -z "${_webui}" ]; then
    eval _webui="\${${1}_webui:-}"
  fi
  echo "${_webui}"
}


# _get_depends
# $1: APP_NAME
# return: the depends variable of the app
_get_depends() {
  local _depends=""

  if [ -f "${DROBOAPPS_DIR}/${1}/service.sh" ]; then
    # There is a service.sh
    _depends="$($GREP '^depends=' "${DROBOAPPS_DIR}/${1}/service.sh")"
    if [ -n "${_depends}" ]; then
      # There is a depends in service.sh
      _depends="$(echo "${_depends}" | $SED -e 's/^depends=//' -e 's/\"//g')"
      echo "${_depends}"
      return 0
    fi
  fi
  # Legacy information from /etc/service.depends
  if $GREP -q "^${1}_depends=" "${SERVICE_DEPENDS}"; then
    # <app_name>_depends is set, possibly empty
    eval _depends="\${${1}_depends:-}"
  else
    # <app_name>_depends is not set
    _depends="${DEFAULT_DEPENDS:-}"
  fi
  echo "${_depends}"
}


# _tgz_contains_file
# $1: tgz file path
# $2: filename without path
# return: 0 if tgz contains file, 1 if not
# This function looks in the tgzs "root" folder for the given filename.
# It will return 0 if "filename" or "./filename" are present in the tgz.
_tgz_contains_file() {
  local _tgz="${1}"
  local _file="${2}"

  if $TAR -ztf "${_tgz}" "${_file}" > /dev/null 2>&1; then
    return 0
  elif $TAR -ztf "${_tgz}" "./${_file}" > /dev/null 2>&1; then
    return 0
  fi
  return 1
}


# _tgz_extract_file
# $1: tgz file path
# $2: filename without path
# $@: further tgz options, such as -O or -C
# return: 0 if tgz contains file, 1 if not
# This function looks in the tgzs "root" folder for the given filename.
# It will return 0 if "filename" or "./filename" are present in the tgz.
_tgz_extract_file() {
  local _tgz="${1}"
  shift
  local _file="${1}"
  shift

  if ! $TAR -zxf "${_tgz}" "${_file}" "$@" 2> /dev/null; then
    $TAR -zxf "${_tgz}" "./${_file}" "$@" 2> /dev/null
  fi
}


# _extract_depends
# $1: "update" or "install" or "service"
# $2: TGZ_FILE file path
# return: prints the list of dependencies.
# This function extracts the content of the depends variable from the given
# type. It also does some basic dependency validation.
_extract_depends() {
  local _tgz="${1}"
  local _appname=""
  local _depends=""

  _appName="$($BASENAME "${_tgz}" .tgz)"
  if _tgz_contains_file "${_tgz}" "service.sh"; then
    _depends="$(_tgz_extract_file "${_tgz}" "service.sh" -O | $GREP '^depends=')"
    if [ -n "${_depends}" ]; then
      # There is a depends in service.sh
      _depends="$(echo "${_depends}" | $SED -e 's/^depends=//' -e 's/\"//g')"
    elif $GREP -q "^${_appName}_depends=" "${SERVICE_DEPENDS}"; then
      # Legacy information from /etc/service.depends
      # <app_name>_depends is set, possibly empty
      eval _depends="\${${_appName}_depends:-}"
    else
      # <app_name>_depends is not set
      _depends="${DEFAULT_DEPENDS:-}"
    fi
  elif $GREP -q "^${_appName}_depends=" "${SERVICE_DEPENDS}"; then
    # Legacy information from /etc/service.depends
    # <app_name>_depends is set, possibly empty
    eval _depends="\${${_appName}_depends:-}"
  else
    # <app_name>_depends is not set
    _depends="${DEFAULT_DEPENDS:-}"
  fi
  echo "${_depends}"
}


# _contains_depend
# $1: DEPENDS
# $2: APP_NAME
# return: 0 if APP_NAME is in DEPENDS, 1 otherwise
# This function extracts the content of the depends variable from the given
# type. It also does some basic dependency validation.
_contains_depend() {
  local _service=""

  if [ -z "${_depends}" ]; then
    return 1
  fi
  for _service in ${1}; do
    if [ "${_service}" = "${2}" ]; then
      return 0
    fi
  done
  return 1
}


# _create_files
# $1: APP_NAME
# This function generates all files inside the app-specific tmp folder.
# This can only be called from inside service.sh.
_create_files() {
  local _appTmpDir="${DROBOAPPS_TMPDIR}/${1}"

  if [ ! -d "${_appTmpDir}" ]; then
    $MKDIR -p "${_appTmpDir}"
    if [ ! -d "${_appTmpDir}" ]; then
      return 1
    fi
  fi

  if [ -n "${name+isset}" ]; then
    echo "${name}" > "${_appTmpDir}/name.txt"
  elif [ -n "${Name+isset}" ]; then
    # We're inside a legacy service.sh
    echo "${Name}" > "${_appTmpDir}/name.txt"
  else
    echo "${_appName}" > "${_appTmpDir}/name.txt"
  fi

  if [ -n "${version+isset}" ]; then
    echo "${version}" > "${_appTmpDir}/version.txt"
  elif [ -n "${Version+isset}" ]; then
    # We're inside a legacy service.sh
    echo "${Version}" > "${_appTmpDir}/version.txt"
  fi

  if [ -n "${description+isset}" ]; then
    echo "${description}" > "${_appTmpDir}/description.txt"
  elif [ -n "${Description+isset}" ]; then
    # We're inside a legacy service.sh
    echo "${Description}" > "${_appTmpDir}/description.txt"
  fi

  if [ -n "${framework_version+isset}" ]; then
    echo "${framework_version}" > "${_appTmpDir}/framework_version.txt"
  fi

  if [ -n "${depends+isset}" ]; then
    echo "${depends}" > "${_appTmpDir}/depends.txt"
  fi

  if [ -n "${webui+isset}" ]; then
    echo "${webui}" > "${_appTmpDir}/webui.txt"
  fi
}


# _create_app_files
# $1: APP_NAME
# This function generates all files inside the app-specific tmp folder.
# It extracts the SDK variables from service.sh and creates the corresponding
# files.
_create_app_files() {
  local _appTmpDir="${DROBOAPPS_TMPDIR}/${1}"
  local _name=""
  local _version=""
  local _description=""
  local _framework_version=""
  local _depends=""
  local _webui=""

  if [ ! -d "${_appTmpDir}" ]; then
    $MKDIR -p "${_appTmpDir}"
    if [ ! -d "${_appTmpDir}" ]; then
      return 1
    fi
  fi

  # no service.sh, nothing to do
  if [ ! -f "${DROBOAPPS_DIR}/${1}/service.sh" ]; then
    return 0
  fi

  _name="$(_get_name "${1}")"
  _version="$(_get_version "${1}")"
  _description="$(_get_description "${1}")"
  _framework_version="$(_get_framework_version "${1}")"
  _depends="$(_get_depends "${1}")"
  _webui="$(_get_webui "${1}")"

  if [ -n "${_name}" ]; then
    echo "${_name}" > "${_appTmpDir}/name.txt"
  fi
  if [ -n "${_version}" ]; then
    echo "${_version}" > "${_appTmpDir}/version.txt"
  fi
  if [ -n "${_description}" ]; then
    echo "${_description}" > "${_appTmpDir}/description.txt"
  fi
  if [ -n "${_framework_version}" ]; then
    echo "${_framework_version}" > "${_appTmpDir}/framework_version.txt"
  fi
  if [ -n "${_depends}" ]; then
    echo "${_depends}" > "${_appTmpDir}/depends.txt"
  fi
  if [ -n "${_webui}" ]; then
    echo "${_webui}" > "${_appTmpDir}/webui.txt"
  fi
}


# _file_equals
# $1: FILE_PATH
# $2: FILE_PATH
# return: 0 = files are equal, 1 = files are different, 2 = file missing.
_file_equals() {
  $DIFF -q "${1}" "${2}" > /dev/null 2>&1
}


# _deploy_apache_conf
# $1: APP_NAME
# Deploy an apache configuration file.
# For legacy apps (i.e., apps that do not declare a "depends" variable),
# Apache is automatically downloaded and installed if not already present.
# If the app declares a "depends" variable in service.sh, then apache is not
# automatically installed unless it is declared as a dependency, and its
# configuration file is not automatically deployed.
# If the configuration file is deployed, apache is gracefully restarted.
_deploy_apache_conf() {
  local _appConf="${DROBOAPPS_DIR}/${1}/${1}.conf"
  local _apacheName="apache"
  local _apacheDir="${DROBOAPPS_DIR}/${_apacheName}"
  local _apacheConf="${APACHE_CONF_DIR}/${1}.conf"
  local _depends=""
  local _restart=0

  if [ ! -f "${_appConf}" ]; then
    return 0
  fi

  _set_enabled "${_apacheName}" "YES"
  if ! _start_depend "${_apacheName}"; then
    echo "Unable to start apache." >&2
    return 1
  fi

  if [ ! -f "${_apacheConf}" ]; then
    # File is not there.
    $CP "${_appConf}" "${_apacheConf}"
    _restart=1
  elif ! _file_equals "${_appConf}" "${_apacheConf}"; then
    # File content is different
    $CP "${_appConf}" "${_apacheConf}"
    _restart=1
  fi

  # Restart apache if necessary.
  if [ ${_restart} -eq 1 ]; then
    (cd "${_apacheDir}" && $SH "${_apacheDir}/service.sh" restart)
  fi
}


# _remove_apache_conf
# $1: APP_NAME
# Remove an apache configuration file.
# For legacy apps (i.e., apps that do not declare a "depends" variable),
# Apache is automatically downloaded and installed if not already present.
# If the app declares a "depends" variable in service.sh, then apache is not
# automatically installed unless it is declared as a dependency, and its
# configuration file is not automatically deployed.
# If the configuration file is deployed, apache is gracefully restarted.
_remove_apache_conf() {
  local _appConf="${DROBOAPPS_DIR}/${1}/${1}.conf"
  local _apacheName="apache"
  local _apacheDir="${DROBOAPPS_DIR}/${_apacheName}"
  local _apacheConf="${APACHE_CONF_DIR}/${1}.conf"

  if [ ! -f "${_appConf}" ]; then
    return 0
  fi

  if [ ! -d "${_apacheDir}" ]; then
    # Apache is not installed.
    return 0
  fi
  # After this point, apache is installed.

  if [ ! -f "${_apacheConf}" ]; then
    return 0
  fi
  # After this point, there is an apache conf file.

  # Restart apache.
  $RM -f "${_apacheConf}"
  (cd "${_apacheDir}" && $SH "${_apacheDir}/service.sh" restart)
}


# _start_depends
# $@: APP_NAME APP_NAME ...
# return: 0 if all dependencies started without error, 1 if not
# This function iterates through starts all given services.
# Depending on the state of the required service, it downloads, installs,
# and starts it.
_start_depends() {
  local _depend
  for _depend in "$@"; do
    if ! _start_depend "${_depend}"; then
      return 1
    fi
  done
}


# _count
# $@: items to count
# return: number of arguments
_count() {
  echo "$#"
}


# _start_depend
# $1: APP_NAME
# return: 0 if dependency started without error, 1 if not
# Depending on the state of the required service, it downloads, installs,
# and starts it.
_start_depend() {
  local _appDir="${DROBOAPPS_DIR}/${1}"
  local _oldStack="${_DEPENDS_STACK}"

  if [ $(_count ${_DEPENDS_STACK}) -ge 10 ]; then
    echo "Dependency chain is longer than 10: ${_DEPENDS_STACK}." >&2
    return 1
  fi
  _DEPENDS_STACK="${_DEPENDS_STACK} ${1}"

  if [ ! -d "${_appDir}" ]; then
    # App is not installed
    if ! _download_app "${1}"; then
      _DEPENDS_STACK="${_oldStack}"
      return 1
    fi
    if ! _install_app "${DROBOAPPS_DIR}/${1}.tgz"; then
      _DEPENDS_STACK="${_oldStack}"
      return 1
    fi
  fi
  # If it's not enabled, return 1.
  if ! _is_enabled "${1}"; then
    eval echo \"Dependency ${1} is not enabled.\"  ${STDERR}
    _DEPENDS_STACK="${_oldStack}"
    return 1
  fi
  # If it isn't running, start it.
  if ! _is_app_running "${1}"; then
    eval echo \"Starting dependency: ${1}\"  ${STDOUT}
    _create_app_files "${_appName}"
    _prestart_app "${1}"
    if [ -f "${_appDir}/service.sh" ]; then
      if (cd "${_appDir}" && $SH "${_appDir}/service.sh" start); then
        echo "${1} successfully started."
      else
        _DEPENDS_STACK="${_oldStack}"
        return 1
      fi
    fi
  fi
  _DEPENDS_STACK="${_oldStack}"
}


# _download_app
# $1: APP_NAME
# $2: BASE_URL (optional)
# $3: force download (default 0 == no, 1 == yes)
# return: 0 if file downloaded correctly, wget error code otherwise.
# This function downloads an app from ftp://update.drobo.com.
# Files are downloaded and placed in ${DROBOAPPS_DIR}, but only if there isn't
# a similarly named file in ${DROBOAPPS_DIR}.
# This function creates a temporary folder under /mnt/DroboFS/System/tmp,
# in which it downloads the tgz file, and places the wget log.
_download_app() {
  local _repoUrl="${2:-$DROBOAPPS_REPO_URL}"
  local _tmpDir="/mnt/DroboFS/System/tmp"
  local _tmpWgetDir=""
  local _result=0
  local _force=${3:-0}

  if [ -f "${DROBOAPPS_DIR}/${1}.tgz" ] && [ ${_force} -eq 0 ]; then
    echo "Skipping download of ${1}. File is already in ${DROBOAPPS_DIR}."
    return 0
  fi

  if [ ! -d "${_tmpDir}" ]; then
    $MKDIR -p "${_tmpDir}"
    if [ ! -d "${_tmpDir}" ]; then
      return 1
    fi
  fi

  _tmpWgetDir="$($MKTEMP -dt -p "${_tmpDir}" "${1}.XXXXXX")"

  if [ -z "${_tmpWgetDir}" ]; then
    eval echo \"Unable to create a temporary download folder.\" ${STDERR}
    return 1
  fi

  $WGET -O "${_tmpWgetDir}/${1}.tgz" "${_repoUrl}/${1}.tgz" > "${_tmpWgetDir}/wget.log" 2>&1
  _result=$?
  if [ ${_result} -eq 0 ]; then
    $CP "${_tmpWgetDir}/${1}.tgz" "${DROBOAPPS_DIR}/"
    $RM -rf "${_tmpWgetDir}"
  else
    eval echo \"Unable to download ${1}. Please check ${_tmpWgetDir}/wget.log for more information.\" ${STDERR}
    return ${_result};
  fi
}


# _install_app
# $1: TGZ_FILE file path
# Install a single app from the full path of the TGZ file.
_install_app() {
  local _tgz="${1:-}"
  local _appName=""
  local _appDir=""
  local _depends=""

  if [ -z "${1}" ]; then
    # no TGZ given
    echo "Missing TGZ file path." >&2
    return 1
  fi

  if [ ! -f "${_tgz}" ]; then
    # TGZ does not exist
    echo "File ${_tgz} not found." >&2
    return 1
  fi

  _appName="$($BASENAME "${_tgz}" .tgz)"
  _appDir="${DROBOAPPS_DIR}/${_appName}"

  # Check dependencies before untar and mkdir
  _depends="$(_extract_depends "${_tgz}")"
  if [ -n "${_depends}" ]; then
    echo "Checking service dependencies for ${_appName}."
    if ! _start_depends ${_depends}; then
      eval echo \"Unable to start dependencies for ${_appName}.\" ${STDERR}
      return 1
    fi
  fi
  # After this point all dependencies have been installed.

  # If the directory already exists, this is an upgrade and
  # untar on top of the existing install.
  if [ -d "${_appDir}" ]; then
    eval echo \"Upgrading ${_appName}.\" ${STDOUT}
    if _tgz_contains_file "${_tgz}" "update.sh"; then
      _tgz_extract_file "${_tgz}" "update.sh" -C "${_appDir}"
      # Launch the update script.
      (cd "${_appDir}" && $SH "${_appDir}/update.sh" && $RM -f "${_appDir}/update.sh")
    fi
  else
    eval echo \"Installing ${_appName}.\" ${STDOUT}
    $MKDIR -p "${_appDir}"
    $CP "/sys/devices/dri_dnas_primary/dnas_adp_1/driver/serial" "${_appDir}/host_uid.txt"
  fi

  $TAR -zxf "${_tgz}" -C "${_appDir}" && $RM -f "${_tgz}"
  if [ -f "${_appDir}/update.sh" ]; then
    $RM -f "${_appDir}/update.sh"
  fi
  _create_app_files "${_appName}"

  # if there is an install.sh file, run it.
  if [ -f "${_appDir}/install.sh" ]; then
    eval echo \"Running post-install script for ${_appName}.\" ${STDOUT}
    (cd "${_appDir}" && $SH "${_appDir}/install.sh" && $RM -f "${_appDir}/install.sh")
  fi

  # if there is an apache conf file, install it, and restart apache.
  if ! _deploy_apache_conf "${_appName}"; then
    echo "Unable to deploy ${_appName}.conf." >&2
  fi
}


# _uninstall_app
# $1: APP_NAME
# $2: 0 = perform sanity checks (default), 1 = force uninstall
# This function stops the app, calls the app's uninstall.sh (if present),
# removes the enable state from ${SERVICE_CONF}, then removes the app's folder
# and /tmp/DroboApps folder.
# Apps can only be uninstalled if there are no other apps that depend on them.
_uninstall_app() {
  local _appDir="${DROBOAPPS_DIR}/${1}"
  local _tmpDir="${DROBOAPPS_TMPDIR}/${1}"
  local _force=${2:-0}

  local _apps=""
  local _app=""
  local _depends=""

  if [ ! -d "${_appDir}" ]; then
    eval echo \"${_appName} is not installed.\" ${STDERR}
    return 1
  fi

  # check that there are no other apps that depend on this one.
  if [ ${_force} -eq 0 ]; then
    _apps="$(_list_droboapps)"
    if [ -n "${_apps}" ]; then
      for _app in ${_apps}; do
        if [ -f "${DROBOAPPS_DIR}/${_app}/service.sh" ]; then
          _depends="$(_get_depends "${_app}")"
          if _contains_depend "${_depends}" "${1}"; then
            eval echo \"Cannot uninstall ${1}: ${_app} depends on it.\" ${STDERR}
            return 1
          fi
        fi
      done
    fi
  fi

  # Stop the app
  if [ -f "${_appDir}/service.sh" ] && _is_app_running "${1}"; then
    (cd "${_appDir}" && $SH "${_appDir}/service.sh" stop)
  fi

  # Call uninstall
  if [ -f "${_appDir}/uninstall.sh" ]; then
    (cd "${_appDir}" && $SH "${_appDir}/uninstall.sh")
  fi

  # Remove the enabled state
  _unset_enabled "${1}"

  # If there is an apache conf file, remove it, and restart apache.
  if ! _remove_apache_conf "${1}"; then
    echo "Unable to remove ${1}.conf." >&2
  fi

  # Delete the app folder
  if [ -d "${_appDir}" ]; then
    $RM -fr "${_appDir}"
  fi

  # Delete the /tmp/DroboApps/app folder
  if [ -d "${_tmpDir}" ]; then
    $RM -fr "${_tmpDir}"
  fi
}


# _status_app
# $1: APP_NAME
# return: the status message of the app.
# Returns the status message of a single app.
_status_app() {
  local _appDir="${DROBOAPPS_DIR}/${1}"
  local _appTmpDir="${DROBOAPPS_TMPDIR}/${1}"
  local _status
  local _enabled
  local _running

  if [ ! -d "${_appDir}" ]; then
    _status="${_appName} is not installed."
  elif [ ! -f "${_appDir}/service.sh" ]; then
    _status="${_appName} is enabled and running."
  else
    _status="$(cd "${_appDir}" && $SH "${_appDir}/service.sh" status 2> /dev/null || true)"
    if [ -z "${_status}" ] || ! (echo "${_status}" | $GREP -q "stopped") && ! (echo "${_status}" | $GREP -q "running"); then
      # Implementing fallback to SDK 2.0 for apps that have custom status messages.
      if _is_enabled "${_appName}"; then
        _enabled="enabled"
      else
        _enabled="disabled"
      fi
      if $SSD -K -t -p "${_appTmpDir}/pid.txt" -q 2> /dev/null; then
        _running="running"
      else
        _running="stopped"
      fi
      _status="${_appName} is ${_enabled} and ${_running}"
    else
      _status=$(echo "${_status}" | $GREP ".* is .* and .*" 2> /dev/null || true)
    fi
  fi

  echo "${_status}"
}


# _is_app_running
# $1: APP_NAME
# return: 0 if app is running, 1 if not running or if pidfile does not exist.
# This function delegates the task of determining the state of an app to its
# service.sh. If the app does not have a service.sh, it defaults to running.
_is_app_running() {
  _status_app "${1}" | $GREP -q running
}


# is_running
# $1: PIDFILE file path
# $2: DAEMON file path (optional, but recommended)
# return: 0 if app is running, 1 if not running or if pidfile does not exist.
# This function determines whether an app is running or not based on the
# pidfile and daemon variables. If pidfile is not provided, it defaults to
# not running.
# Service.sh can redefine this function to customize its implementation,
# as long as the return semantics are respected.
is_running() {
  local _pidfile="${1:-}"
  local _daemon="${2:-}"

  if _function_exists "_is_running"; then
    # Preserve _is_running behavior from DroboApps that redefined _is_running.
    _is_running "${_pidfile}" "${_daemon}"
  else
    # Default implementation.
    if [ -z "${_pidfile}" ]; then
      # Missing pidfile argument.
      return 1
    elif [ -z "${_daemon}" ]; then
      # Legacy behavior, match based only on pidfile.
      $SSD -K -t -p "${_pidfile}" -q 2> /dev/null
    else
      # Match pid and executable.
      $SSD -K -t -p "${_pidfile}" -x "${_daemon}" -q 2> /dev/null
    fi
  fi
}


# is_stopped
# $1: PIDFILE file path
# $2: DAEMON file path (optional, but recommended)
# return: 0 if app is stopped, 1 if running.
# This function is used to wait for an app to shutdown cleanly. The default
# implementation returns the opposite of is_running.
# Service.sh can redefine this function to customize its implementation,
# as long as the return semantics are respected.
# An app can have custom implementations of both is_running and is_stopped,
# which both return false (1) at the same, if the app is, for example, in the
# middle of a graceful shutdown.
is_stopped() {
  if is_running ${1:-} ${2:-}; then
    return 1
  fi
  return 0
}


# _function_exists
# $1: function name
# return: 0 if function exists, 1 if not
# This function checks the existence of a shell function.
_function_exists() {
  type "${1}" 2> /dev/null | $GREP -q function
}


# _prestart_app
# $1: APP_NAME
# Perform pre-start operations for a given app.
# This code is shared by service.sh and DroboApps.sh.
_prestart_app() {
  _set_enabled "${1}" "YES"
  if ! _file_equals "${_SERIAL_NUMBER}" "${DROBOAPPS_DIR}/${1}/host_uid.txt"; then
    $CP "${_SERIAL_NUMBER}" "${DROBOAPPS_DIR}/${1}/host_uid.txt"
  fi
}


# start_service
# This function is called by service.sh to start the app.
start_service() {
  local _appDir="$($DIRNAME "$($REALPATH "${0}")")"
  local _appName="$($BASENAME "${_appDir}")"

  _create_files "${_appName}"
  _prestart_app "${_appName}"

  # see if the service is already running
  if is_running "${pidfile:-}" "${daemon:-}"; then
    eval echo \"${_appName} is already running.\" ${STDERR}
    return 1
  fi

  # if there is an apache conf file, install it, and restart apache.
  if ! _deploy_apache_conf "${_appName}"; then
    echo "Unable to deploy ${_appName}.conf." >&2
  fi

  # if the depends variable is set, verify any services that need to be
  # started first are taken care of
  if [ -n "${depends}" ]; then
    if ! _start_depends ${depends}; then
      echo "Unable to resolve dependencies for ${_appName}." >&2
      return 1
    fi
  fi

  # call start function defined by service.sh
  if _function_exists "start"; then
    start
  fi
}


# stop_service
# $1: 0 = force shutdown (default) or 1 = wait forever
# This function is called by service.sh to stop the app.
# Service.sh may provide a "stop" function that will be called in case
# there is no pidfile, and also if is_stopped returns 0.
# Apps are given 10 seconds to shutdown properly, otherwise they will
# be forcibly shutdown. This happens by either calling "force_stop",
# or by SIGKILLing the pid.
# If there is no pidfile, service.sh must redefine is_running and
# is_stopped.
stop_service() {
  local _appDir="$($DIRNAME "$($REALPATH "${0}")")"
  local _appName="$($BASENAME "${_appDir}")"
  local _wait=${1:-0}
  local _retries=10

  if is_stopped "${pidfile:-}" "${daemon:-}"; then
    eval echo \"${_appName} is not running.\" ${STDERR}
    return 1
  fi

  # service is running
  if _function_exists "stop"; then
    # Delegate to "stop" function.
    stop
  else
    return 1
  fi

  # Wait up to ${_retries} seconds.
  while [ ${_retries} -gt 0 ]; do
    if is_stopped "${pidfile:-}" "${daemon:-}"; then
      break
    fi
    if [ ${_wait} -eq 0 ]; then
      _retries=$(( _retries - 1 ))
    fi
    sleep 1
  done

  # If still running, force shutdown.
  if ! is_stopped "${pidfile:-}" "${daemon:-}"; then
    if _function_exists "force_stop"; then
      # Delegate to "force_stop" function.
      force_stop
    else
      return 1
    fi
  fi

  if [ -n "${pidfile:-}" ] && [ -f "${pidfile:-}" ]; then
    $RM -f "${pidfile}"
  fi

  _poststop_app "${_appName}"
}


# kill_service
# This function is called by service.sh to kill the app.
# Service.sh may provide a "force_stop" function that will be called in case
# there is no pidfile.
# If there is no pidfile, service.sh must redefine force_stop.
kill_service() {
  local _appDir="$($DIRNAME "$($REALPATH "${0}")")"
  local _appName="$($BASENAME "${_appDir}")"

  if _function_exists "force_stop"; then
    # Delegate to "force_stop" function.
    force_stop
  else
    return 1
  fi

  if [ -n "${pidfile:-}" ] && [ -f "${pidfile:-}" ]; then
    $RM -f "${pidfile}"
  fi

  _poststop_app "${_appName}"
}


# _poststop_app
# $1: APP_NAME
# Perform post-stop operations for a given app.
# This code is shared by service.sh and DroboApps.sh.
_poststop_app() {
  _set_enabled "${1}" "NO"
}


# stop
# Default implementation of stop.
# Relies on the pidfile and daemon variables.
# Service.sh can redefine this function to customize its implementation.
stop() {
  if [ -z "${pidfile:-}" ]; then
    # Missing pidfile argument.
    echo "Missing pidfile information in service.sh." >&2
    return 1
  elif [ -z "${daemon:-}" ]; then
    # Legacy behavior, match based only on pidfile.
    $SSD -K -p "${pidfile}" -q
  else
    # Match pid and executable.
    $SSD -K -p "${pidfile}" -x "${daemon}" -q
  fi
}


# force_stop
# Default implementation of force_stop.
# Relies on the pidfile and daemon variables.
# Service.sh can redefine this function to customize its implementation.
force_stop() {
  if [ -z "${pidfile:-}" ]; then
    # Missing pidfile argument.
    echo "Missing pidfile information in service.sh." >&2
    return 1
  elif [ -z "${daemon:-}" ]; then
    # Legacy behavior, match based only on pidfile.
    $SSD -K -s 9 -p "${pidfile}" -q
  else
    # Match pid and executable.
    $SSD -K -s 9 -p "${pidfile}" -x "${daemon}" -q
  fi
}


# restart
# Default implementation of a restart function.
# Service.sh can redefine this function as needed.
restart() {
  stop_service 1 || true
  start_service
}


# status
# Print out a status message about if the service is enabled/disabled and
# running/stopped.
# Service.sh can redefine this function as needed.
status() {
  local _appDir="$($DIRNAME "$($REALPATH "${0}")")"
  local _appName="$($BASENAME "${_appDir}")"
  local _enabled
  local _running

  # check to see if the service is enabled
  if _is_enabled "${_appName}"; then
    _enabled="enabled"
  else
    _enabled="disabled"
  fi

  # check to see if the service is running
  if is_running "${pidfile:-}" "${daemon:-}"; then
    _running="running"
  else
    _running="stopped"
  fi

  eval echo \"${_appName} is ${_enabled} and ${_running}\" ${STDOUT}
}


# usage
# Default implementation of usage help message, which generates the text besed
# on the defined functions.
usage() {
  local _message=""
  local _items=0

  _message="Usage: $0 ["

  if _function_exists "start"; then
    _message="${_message}start"
    _items=$(( ${_items} + 1 ))
  fi

  if _function_exists "stop"; then
    if [ ${_items} -gt 0 ]; then
      _message="${_message}|"
    fi
    _message="${_message}stop|waitstop"
    _items=$(( ${_items} + 2 ))
  fi

  if _function_exists "force_stop"; then
    if [ ${_items} -gt 0 ]; then
      _message="${_message}|"
    fi
    _message="${_message}kill"
    _items=$(( ${_items} + 1 ))
  fi

  if _function_exists "restart"; then
    if [ ${_items} -gt 0 ]; then
      _message="${_message}|"
    fi
    _message="${_message}restart"
    _items=$(( ${_items} + 1 ))
  fi

  if _function_exists "reload"; then
    if [ ${_items} -gt 0 ]; then
      _message="${_message}|"
    fi
    _message="${_message}reload"
    _items=$(( ${_items} + 1 ))
  fi

  if _function_exists "status"; then
    if [ ${_items} -gt 0 ]; then
      _message="${_message}|"
    fi
    _message="${_message}status"
    _items=$(( ${_items} + 1 ))
  fi

  _message="${_message}]"
  eval echo \"${_message}\" ${STDOUT}
  exit 1
}


# main
# Simplified argument handling for apps.
# Service.sh can redefine this function as needed.
main() {
  local _operation="${1:-}"
  shift || true

  case "${_operation}" in
    start)        start_service "$@" ;;
    stop)         stop_service "$@" ;;
    waitstop)     stop_service 1 "$@" ;;
    kill)         kill_service "$@" ;;
    restart)      restart "$@" ;;
    reload)       reload "$@" ;;
    status)       status "$@" ;;
    name)         eval echo \"${name}\" ${STDOUT} ;;
    version)      eval echo \"${version}\" ${STDOUT} ;;
    depends)      eval echo \"${depends}\" ${STDOUT} ;;
    sdk_version)  eval echo \"${framework_version}\" ${STDOUT} ;;
    *)            usage "$@" ;;
  esac
}
